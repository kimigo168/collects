/**正则表达式***/
// 创建方法：1.直接字面量，2.RegExp对象创建
var exp1 = /(^\s+)|(\s+$)/g;

var exp2 = new RegExp('(^\\s+)|(\\s+$)', 'g');

https://www.cnblogs.com/onepixel/p/5218904.html

// 元字符
// ( [ { \ ^ $ | ) ? * + .] }

// (1) ^ 匹配一个输入或一行的开头，如：/^a/ 
// (2) $ 匹配一个输入或一行结尾，如： /a$/
// (3) * 匹配前面元字符0次或多次, 如： /ba*/将匹配 b, ba, baa,
// (4) + 匹配前面元字符1次或多次， /ba+/ 将匹配 ba, baa, baa
// (5) ? 匹配前面元字符0次或1次， /ba?/将匹配 b, ba
// (6) (x) 匹配x保存x在名为$1....$9的变量中  
// 如： let phone = '13509626907'; let after = phone.replace(/(\d{3})(\d{4})(\d{4})/, '$1****$3') => 135****6907
// (7) x|y 匹配x或y
// (8) {n} 精确匹配n次 
// (9) {n,} 匹配n次以上
// (10)  {n,m} 匹配n到m次，至少n次，不能超过m次  如：'12345678'.replace(/(\d{3,5})/, '$1---')  //12345---678
// (11) [xyz] 匹配这个集合中任意一个字符（或元字符）
// (12) [^xyz] 不匹配这个集合中的任意一个字符
// (13) [\b] 匹配一个退格符
// (14) \b 匹配一个单词的边界 'hello'.replace(/\b/, '2') // 2hello
// (15) \B 匹配一个单词的非边界 'hello'.replace(/\B/, '2') // h2ello
// (16) \d 匹配一个数字符 /\d/ = /[0-9]/
// (17) \D 匹配一个非数字字符, /\D/ = /[^0-9]/
// (18) \n 匹配一个换行符
// (19) \r 匹配一个回车符
// (20) \s 匹配一个空白字符， 包括 /[\n\r\f\t\v]/ 等
// (21) \S 匹配一个非空白字符，等于 /[^\n\r\f\t\v]/
// (22) \w 匹配一个字母或数字, 等于 [a-zA-Z0-9]
// (23) \W 匹配一个非字母或数字，等于[^a-zA-Z0-9]
// (24) 匹配除换行符以外的任意字符，等价于[^\n] 

// 例子
// /\w{3}\d?/ 匹配3个单字字符和任意一个数字
//  /\s+javas\s+/ 匹配字符串"java",并且该串前后可以有一个或多个空格
// [^"]*/ 匹配零个或多个非引号字符

var exp = /\.docx/gi
// 由于 RegExp 构造函数的模式参数是字符串，所以在某些情况下要对字符进行双重转义
var exp = new RegExp('\\.docx', 'gi')
// () 提取匹配的字符串
// [] 匹配的字符范围
// {} 一般表示长度

var c112 = '<p>1245</p><p class>22234</p>'.replace(/(<p>|<p class>)$/ig, '')

// test则是用来检测字符串是否匹配某一个正则表达式，如果匹配就会返回true,反之则返回false
// match是获取正则匹配到的结果，以数组的形式返回
// 应用
function getUrlParamObj(){
  var obj = {};
  //获取url的参数部分&name=xiao&age=12
  var params = window.location.search.substr(1);
  //[^&=]+ 表示不含&或=的连续字符，加上()就是提取对应字符串
  params.replace(/([^&=]+)=([^&=]*)/gi, function(rs, $1, $2){
      obj[$1] =  decodeURIComponent($2);
  });

  return obj;
}