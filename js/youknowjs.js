// 1.1编译原理
// 分词/词法分析，解析/语法分析，代码生成

// 抽象语法树（AST）
// 代码生成：将AST转换为可执行代码（一组机器指令）的过程
// javascript引擎 JIT

// 1.2作用域
// (赋值操作的目标是谁)LHS （谁是赋值操作的源头）RHS：retrieve his source value

// 1.3作用域嵌套

// 1.4异常 
// 如果RHS查询时无法找到该变量，一个未声明的变量，报ReferenceError
// 严格模式禁止自动或隐式地创建全局变量，也会报类似ReferenceError
// RHS查找到一个变量，进行了不合理地操作，比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的属性，那么引擎会抛出另外一种类型的异常，叫作 TypeError

// ReferenceError同作用域判别失败相关，而TypeError则代表作用域判别成功了，但对结果的操作是非法的不合理的。

// 小结
// 作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。


